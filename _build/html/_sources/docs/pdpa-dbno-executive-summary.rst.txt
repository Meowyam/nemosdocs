=========================
Audience and Technologies
=========================

This documentation is aimed at a full-stack developer, web application architect, or product manager who wishes to install the Web Tool for their organisation who is familiar with the following technologies commonly involved in web and mobile app development:

- Unix and Linux
- HTML, CSS, and Javascript
- Python for server-side programming
- RESTful APIs [#f1]_ for web applications
- Git and Github for source-code distribution and version control
- Amazon Web Services EC2 (Elastic Compute Cloud)
- HTTP, HTTPS, and SSL certificates

A developer experienced with single-page apps should recognize the general architecture of the Web Tool. The Web Tool and the L4 backend which supports it are built using the following technologies:

- the Vue 3 framework for Javascript (a framework similar to React)
- the Purescript language (used for web development)
- the Haskell language (used for the interpreter)

The reader will be able to install the Web Tool even if they are unfamiliar with these technologies. For completeness we summarise these technology choices.

- Vue is a framework similar to React and Angular, providing infrastructure for component-oriented single-page web application development. We chose it for its excellent support for hot-reloading and re-rendering.
  
- Purescript is a functional language that compiles to Javascript, used for the configuration and interactive recomputation of the interview results. We chose it because it lies at the intersection of Haskell-style functional programming and `compatibility with Javascript and Vue <https://sliptype.com/functional-front-end/>`_ [#f2]_ for web development.
  
- Haskell is a functional language used to implement the L4 parser, interpreter, transpilers, and intermediate representation components. We chose it because it is generally recognized as a good choice for language engineering and writing compiler-related tools [#f3]_.

It is envisaged that future development of this Web Tool will involve a design team familiar with the above technologies. The current level of polish of the delivered web app is in accordance with the second deliverable, which states *“The user interface of the Deliverables will be on a minimum-viable level commensurate with a POC, with no design or front-end elements.”*


.. rubric:: Footnotes

.. [#f1] https://www.redhat.com/en/topics/api/what-is-a-rest-api
.. [#f2] via purs-loader: https://github.com/ethul/purs-loader
.. [#f3] https://www.reddit.com/r/haskell/comments/tyl1zr/why_is_haskell_considered_good_for_writing_a/ 