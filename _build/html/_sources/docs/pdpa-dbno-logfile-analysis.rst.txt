================================================
Analysis of an example gunicorn/hello.py logfile
================================================

The following log was captured from a typical invocation of the gunicorn/hello.py script with interspersed remarks.

.. code-block:: 

    [2022-12-02 17:16:24 +0800] [3360812] [INFO] Booting worker with pid: 3360812
    hello.py processCsv() starting at  2022-12-02 17:21:49.002760
    ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/
    hello.py main: calling natural4-exe
    hello.py main: natural4-exe --workdir=./temp/workdir --uuiddir=5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398 ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/20221202T092149.234659Z.csv
    hello.py main: back from natural4-exe (took 0:00:11.995794 seconds)
    hello.py main: natural4-exe stdout length = 3797
    hello.py main: natural4-exe stderr length = 0

The natural4-exe invocation may take up to 15 seconds to run. It is possible to reduce the runtime by passing the --tomd flag which would disable natural language generation output to Markdown format. Without NLG the runtime is typically 200ms.

.. code-block:: 

    hello.py main: running: dot -Tpng -Gdpi=150 ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/petri/LATEST.dot -o ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/petri/2022-12-02T09:21:49.255Z.png &

hello.py calls graphviz to turn the dot files into SVG. These are run as background processes so as not to slow down the primary thread. Note the “&” at the end.

.. code-block:: 

    hello.py main: running: l4 epilog ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/corel4/LATEST.l4 > ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/epilog/20221202T092149.234659Z.epilog


hello.py calls the corel4 transpiler to produce epilog output. Again, this is run as a background process.

.. code-block:: 

    hello.py main: calling python /home/mengwong/src/smucclaw/vue-pure-pdpa/bin/v8k --workdir=/home/mengwong/wow/much up --uuid=5fc0aa1e-9f2c-403e-96a9-6d0011a01479 --ssid=1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss --sheetid=1505307398 --startport=8081 

hello.py calls the v8k controller to launch the Vue web server or reset it with a new Purescript file.

.. code-block:: 

    ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/purs/LATEST.purs
    ** startport = 8081
    ** poolsize = 9
    ** found allegedly existing server(s) on our uuid/ssid/sheetid: 01
    pid 3360758 is listening on port 8082
    pid 3360769 is listening on port 8082
    pid 3360770 is listening on port 8082
    server seems to be still running for port 8082!
    refreshing the purs file
    cp ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/purs/LATEST.purs /home/mengwong/wow/much/vue-01/src/RuleLib/PDPADBNO.purs
    hello.py main: v8k up returned
    v8k.out: :8082/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398

The v8k controller returns its port and path to hello.py, to be passed back to sidebar.

.. code-block:: 

    v8k up succeeded with: :8082/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398
    hello.py processCsv returning at 2022-12-02 17:22:01.170612 (total 12.16785216331482 seconds)


Hello.py terminates after 12.168 seconds.

.. code-block:: 

    40% building 0/1 modules 1 active ...ode_modules/purs-loader/lib/index.js??ref--14-0!/home/mengwong/wow/much/vue-01/src/RuleLib/PDPADBNO.pursgetWorkdirFile: returning 

The vue app’s npm run serve produces a dribble of reset logging – above, the “40%” is indicative of the server reset.

During population of the sidebar, the spreadsheet requests a variety of PNGs and SVGs from the backend; these static file requests are handled by hello.py as well.

.. code-block:: 

    ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/petri/LATEST-small.png
    showAasvgImage: handling /aasvg/ url
    showAasvgImage: sending path ./temp/workdir/5fc0aa1e-9f2c-403e-96a9-6d0011a01479/1leBCZhgDsn-Abg2H_OINGGv-8Gpf9mzuX1RR56v0Sss/1505307398/aasvg/LATEST/Qualifies-tiny.svg

